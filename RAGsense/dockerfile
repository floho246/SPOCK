# syntax=docker/dockerfile:1

FROM python:3.10-slim AS builder

# Set working directory
WORKDIR /app

# Install system dependencies (if needed for pip packages)
RUN apt-get update \
 && apt-get install -y --no-install-recommends build-essential \
 && rm -rf /var/lib/apt/lists/*

# Copy requirements.txt only (for better cache usage)
COPY requirements.txt .

# Create venv and install dependencies using pip cache
RUN --mount=type=cache,target=/root/.cache/pip \
    python -m venv .venv && \
    .venv/bin/pip install --upgrade pip && \
    .venv/bin/pip install -r requirements.txt

# Copy the rest of the application code (excluding .env and secrets)
COPY --link . .

# Final stage: minimal image with venv and app code
FROM base AS final

# Create a non-root user
RUN useradd -m appuser

# Copy app code and venv from builder
COPY --from=builder /app /app
COPY --from=builder /app/.venv /app/.venv

# Set environment variables for Python
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PIP_CACHE_DIR=/root/.cache/pip

ENV ELASTICSEARCH_URI=http://localhost:9200 \
    ELASTIC_USERNAME=elastic \
    ELASTIC_PASSWORD=password \
    GROQ_API_KEY=api key \
    LLM_URL=http://localhost:8080/v1 \
    JIRA_INDEX=connector-jira \
    WIKI_INDEX=content-wiki \
    REPO_INDEX=repo \
    FILES_INDEX=content-network-drive

# Expose FastAPI port
EXPOSE 8000

# Switch to non-root user
USER appuser

# Start the FastAPI app with uvicorn
CMD ["uvicorn", "API_RAGsense:app", "--host", "0.0.0.0", "--port", "8000"]
